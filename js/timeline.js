// Timeline functionality - simplified for Apps Script compatibility
function initializeTimeline() {
  console.log('🔧 Timeline initialization started...');
  
  const timelineSection = document.querySelector('.timeline-section');
  if (!timelineSection) {
    console.error('❌ Timeline section not found!');
    return;
  }

  // Get timeline elements (generated by Apps Script)
  let timelineProgress = document.querySelector('.timeline-progress');
  let timelineItems = document.querySelectorAll('.timeline-item');
  let timelineMarkers = document.querySelectorAll('.timeline-marker');

  if (!timelineProgress || !timelineItems.length || !timelineMarkers.length) {
    console.warn('⚠️ Timeline elements not found - may not be generated yet');
    return;
  }

  console.log(`✅ Found ${timelineItems.length} timeline items and ${timelineMarkers.length} markers`);

  // Update timeline based on scroll position
  function updateTimeline() {
    const scrollTop = window.pageYOffset;
    const windowHeight = window.innerHeight;
    
    // Calculate progress through the entire timeline section
    const sectionRect = timelineSection.getBoundingClientRect();
    const sectionTop = scrollTop + sectionRect.top;
    const sectionHeight = sectionRect.height;
    
    // Progress calculation based on how far we've scrolled through the timeline section
    let progress = 0;
    if (scrollTop > sectionTop - windowHeight) {
      progress = Math.min((scrollTop - sectionTop + windowHeight) / sectionHeight, 1);
    }
    
    // Update progress bar height
    const progressPercent = Math.max(0, Math.min(progress * 100, 100));
    timelineProgress.style.height = `${progressPercent}%`;

    // Find which timeline item should be active based on viewport center
    let activeIndex = 0;
    let bestScore = -Infinity;

    timelineItems.forEach((item, index) => {
      const itemRect = item.getBoundingClientRect();
      const itemTop = itemRect.top;
      const itemBottom = itemRect.bottom;
      const itemCenter = itemTop + itemRect.height / 2;
      const windowCenter = windowHeight / 2;
      
      // Item is visible in viewport
      if (itemBottom > 0 && itemTop < windowHeight) {
        // Calculate how close the item center is to window center
        const distanceFromCenter = Math.abs(windowCenter - itemCenter);
        
        // Prefer items that are more centered and more visible
        const visibilityScore = Math.min(
          itemBottom - Math.max(itemTop, 0),
          windowHeight
        ) / windowHeight;
        
        const centerScore = 1 - (distanceFromCenter / windowHeight);
        const totalScore = visibilityScore * 0.7 + centerScore * 0.3;
        
        if (totalScore > bestScore) {
          bestScore = totalScore;
          activeIndex = index;
        }
      }
    });

    // Update active states
    timelineItems.forEach((item, index) => {
      if (index === activeIndex) {
        item.classList.add('active');
      } else {
        item.classList.remove('active');
      }
    });

    timelineMarkers.forEach((marker, index) => {
      if (index === activeIndex) {
        marker.classList.add('active');
      } else {
        marker.classList.remove('active');
      }
    });
  }

  // Handle marker clicks - scroll to corresponding timeline item
  function setupMarkerClicks() {
    timelineMarkers.forEach((marker, index) => {
      marker.addEventListener('click', () => {
        const targetItem = timelineItems[index];
        if (targetItem) {
          const itemRect = targetItem.getBoundingClientRect();
          const offsetTop = window.pageYOffset + itemRect.top - (window.innerHeight / 2) + (itemRect.height / 2);
          
          window.scrollTo({
            top: Math.max(0, offsetTop),
            behavior: 'smooth'
          });
        }
      });
    });
  }

  // Use throttled scroll listening for better performance
  let ticking = false;
  
  function onScroll() {
    if (!ticking) {
      requestAnimationFrame(() => {
        updateTimeline();
        ticking = false;
      });
      ticking = true;
    }
  }

  // Setup all interactivity
  function setupInteractivity() {
    console.log('⚙️ Setting up timeline interactivity...');
    
    // Setup marker clicks
    setupMarkerClicks();
    
    // Listen for scroll events
    window.addEventListener('scroll', onScroll, { passive: true });

    // Initial update
    updateTimeline();

    // Handle window resize
    window.addEventListener('resize', () => {
      setTimeout(updateTimeline, 100);
    });
    
    console.log('✅ Timeline interactivity setup complete');
  }

  // Start setup
  setupInteractivity();
}



// Export for use in main.js
window.initializeTimeline = initializeTimeline;